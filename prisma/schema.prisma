datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum UserRole {
  USER
  ADMIN
}

enum CapsuleStatus {
  OPEN
  SEALED
}

enum InviteStatus {
  PENDING
  ACCEPTED
  DONE
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?   @unique
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  accounts      Account[]

  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  Capsule             Capsule[]
  CapsuleCollaborator CapsuleCollaborator[]
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Capsule {
  id          String        @id @default(cuid())
  title       String
  description String
  coverImage  String
  dateToOpen  DateTime
  Status      CapsuleStatus @default(SEALED)
  private     Boolean       @default(false)
  files       String[]      @default([])
  userId      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  collaborators CapsuleCollaborator[]
  user          User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CapsuleCollaborator {
  id        String @id @default(cuid())
  capsuleId String
  userId    String

  status InviteStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  capsule Capsule @relation(fields: [capsuleId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([capsuleId, userId])
}
